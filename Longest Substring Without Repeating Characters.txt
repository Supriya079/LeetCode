class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.length() == 0){
            return 0;
        }
        
        int maxLen = 1;
        int back = 0;
        int front = 0;
        unordered_set<char> hmap;
        
       while(back<s.length() && front<s.length()){
           if(hmap.find(s[front]) == hmap.end()){
               hmap.insert(s[front]);
               front++;
               
               maxLen = max(maxLen, front-back);
           }else{
               hmap.erase(s[back]);
               back++;
           }
       }
        
        return maxLen;   
    }
};